/*
 * Kaniu
 * Sistema de gestão de abrigos de animais
 * Gestão do animal
 */

// Variáveis de trabalho
const animal = $('Get Details').first().json;
const especies = JSON.stringify($('Tables').first().json.especies);
const racas = JSON.stringify($('Tables').first().json.racas);
const generos = JSON.stringify($('Tables').first().json.generos);
const portes = JSON.stringify($('Tables').first().json.portes);
const cores = JSON.stringify($('Tables').first().json.cores);
const pelagens = JSON.stringify($('Tables').first().json.pelagens);
const icones = $('Icons').first().json;

const app_url = $('Kaniu').first().json.webhookUrl.split('webhook/')[1];
const img_logo = $('Constants').item.json.img_logo;

// Códogo para obter o arquivo de estilo
const estilo = $('Estilo').first().json;

// Função para converter boolean para "Sim" ou "Não"
const formatBoolean = (value) => value ? 'Sim' : 'Não';

// Função para checar por valores nulos ou 0
const formatValue = (value) => value === null || value === 0 || value === undefined ? '' : value;

// Função para calcular idade completa em anos, meses e dias
const calculateAge = (birthDate) => {
    const today = new Date();
    const dob = new Date(birthDate);

    let years = today.getFullYear() - dob.getFullYear();
    let months = today.getMonth() - dob.getMonth();
    let days = today.getDate() - dob.getDate();

    if (days < 0) {
        months--;
        const prevMonth = new Date(today.getFullYear(), today.getMonth(), 0);
        days = today.getDate() + (prevMonth.getDate() - dob.getDate());
    }

    if (months < 0) {
        years--;
        months = 12 + months;
    }

    let txt_anos = years == 0 ? '' : years == 1 ? '1 ano' : years + ' anos';
    let txt_meses = months == 0 ? '' : months == 1 ? '1 mês' : months + ' meses';
    let txt_e = (txt_anos == '' || txt_meses == '') ? '' : ' e ';

    return txt_anos+txt_e+txt_meses;
};

// Calcula a idade do animal
const ageString = calculateAge(animal.nascimento);

// Função para retornar um ícone
function getIcon(icon_name) {
    return '<i class="fa-solid fa-' + icones[icon_name] + '"></i>';
}

// Função para gerar o HTML dos ícones com base nas propriedades do animal
function animalStatusIcons(animal) {
    let iconsHtml = '';

    // Verifica se o animal está castrado e adiciona o ícone se for verdade
    if (animal.castrado) {
        iconsHtml += '<div class="img-button-wrapper"><i class="fa-solid fa-scissors"></i><span class="tooltip">Castrado</span></div>';
    }

    // Verifica se o animal está vacinado
    if (animal.vacinado) {
        iconsHtml += '<div class="img-button-wrapper"><i class="fa-solid fa-syringe"></i><span class="tooltip">Vacinado</span></div>';
    }

    // Verifica se o animal está vermifugado
    if (animal.vermifugado) {
        iconsHtml += '<div class="img-button-wrapper"><i class="fa-solid fa-pills"></i><span class="tooltip">Vermifugado</span></div>';
    }

    // Verifica se o animal está desparasitado
    if (animal.desparasitado) {
        iconsHtml += '<div class="img-button-wrapper"><i class="fa-solid fa-bug-slash"></i><span class="tooltip">Desparasitado</span></div>';
    }

    return iconsHtml;
}

// Gera o html dos ícones indicando o status do animall
const iconesAnimal = animalStatusIcons(animal);

// =========================================================================
// O CÓDIGO DO N8N TERMINA AQUI. A PARTIR DAQUI VEM O HTML E O JAVASCRIPT
// QUE SERÃO EXECUTADOS NO NAVEGADOR.
// =========================================================================

// Gera o html principal da página
const html = `
<!DOCTYPE html>
<html lang="pt-br">

${estilo.style}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<script src="https://kit.fontawesome.com/78b7eb0968.js" crossorigin="anonymous"></script>

<script>
    const cachedData = {};
    
    // =========================================================================
    // FUNÇÕES DE LÓGICA DO POP-UP DE PESAGEM (AS FUNÇÕES DE ABRIR E CLIQUE FORAM REMOVIDAS/SIMPLIFICADAS)
    // =========================================================================

    // Função de tratamento do clique na linha da tabela.
    // É esperado que a linha tenha o atributo data-record com o JSON do item.
    function handlePesagemClick(rowElement) {
        // 1. Obtém a string JSON com as entidades &quot;
        const itemDataString = rowElement.getAttribute('data-record');
        
        // 2. Substitui as entidades &quot; pelas aspas duplas reais (")
        const safeJsonString = itemDataString.replace(/&quot;/g, '"');
        
        // 3. Faz o parse da string JSON para um objeto
        const record = JSON.parse(safeJsonString);
        
        // 4. Abre o pop-up com o registro
        openPesagemPopup(record);
    }

    // Função para fechar o pop-up da pesagem
    function closePesagemPopup() {
        document.getElementById('overlay').style.display = 'none';
        document.getElementById('pop-up-pesagem').style.display = 'none';
        // Limpa a mensagem de erro
        const errorElement = document.getElementById('pop-up-pesagem').querySelector('.error-message-pesagem');
        if (errorElement) {
            errorElement.remove();
        }
    }

    // Função para abrir o popup de pesagem (novo ou editar)
    function openPesagemPopup(record = null) {
        if (record) {
            // Edição
            document.getElementById('pesagem-id').value = record.id;
            document.getElementById('pesagem-data-input').value = record.data;
            document.getElementById('pesagem-peso-input').value = record.peso;
        } else {
          // Novo registro
          document.getElementById('pesagem-id').value = "";
          const today = new Date().toISOString().split('T')[0]; // pega AAAA-MM-DD
          document.getElementById('pesagem-data-input').value = today;
          document.getElementById('pesagem-peso-input').value = "";
        }
    
        document.getElementById('overlay').style.display = 'block';
        document.getElementById('pop-up-pesagem').style.display = 'flex';
    }
    
    // Função para salvar (update ou insert)
    async function updatePesagemRecord() {
        const id = document.getElementById('pesagem-id').value;
        const data = document.getElementById('pesagem-data-input').value;
        const peso = document.getElementById('pesagem-peso-input').value;
    
        const popup = document.getElementById('pop-up-pesagem');
        const popupActions = popup.querySelector('.pop-up-actions');
    
        if (!data || !peso || isNaN(parseFloat(peso))) {
            const errorElement = popup.querySelector('.error-message-pesagem');
            if (errorElement) errorElement.remove();
            popupActions.insertAdjacentHTML(
                'beforebegin',
                '<p class="error-message-pesagem" style="color:var(--primary-color); font-size: 0.8rem; text-align:center; margin-bottom: 5px;">Preencha todos os campos corretamente.</p>'
            );
            return;
        }
    
        try {
            let payload = {
                animal_id: '${animal.animal_id}',
                data: data,
                peso: parseFloat(peso)
            };
    
            let url = "";
            if (id) {
                // atualização
                payload.tipo_registro = "pesagem";
                payload.id_registro = id;
                url = "https://karah-n8n.uzd6db.easypanel.host/webhook/kaniu_animal_update";
            } else {
                // inclusão
                url = "https://karah-n8n.uzd6db.easypanel.host/webhook/kaniu-add-pesagem";
            }
    
            const response = await fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });
    
            if (!response.ok) {
                throw new Error("Falha ao salvar o registro de pesagem.");
            }
    
            showAlert(id ? "Pesagem atualizada com sucesso!" : "Pesagem incluída com sucesso!", "success", 2000);
    
            cachedData['pesagens'] = null;
            await fetchTabData('pesagens');
    
        } catch (error) {
            showAlert("Erro ao salvar a pesagem: " + error.message, "error", 3000);
        } finally {
            closePesagemPopup();
        }
    }

    
    // =========================================================================

    async function fetchTabData(tabId) {
        if (cachedData[tabId]) {
            return;
        }

        const tabContentElement = document.getElementById('tab-' + tabId);
        //tabContentElement.innerHTML = '<div class="loading-message">Carregando...</div>'; //teste

        try {
            const payload = {
                tab_name: tabId,
                animal_id: '${animal.animal_id}'
            };

            const response = await fetch("https://karah-n8n.uzd6db.easypanel.host/webhook/kaniu-animal-dados", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error('Erro na resposta da rede: ' + response.statusText);
            }

            const data = await response.json();

            // Trata a resposta do endpoint que agora retorna JSON com 'items' ou 'error'
            if (data.error) {
                tabContentElement.innerHTML = '<div class="no-data-message">' + data.error + '</div>';

            } else if (tabId !== 'resumo' && (data.items.length == 0 || data.items[0].id == null)) {
                tabContentElement.innerHTML = '<div class="no-data-message">Nenhum item encontrado.</div>';

            } else if (data.items) {

                // Mapeamento de chaves para títulos de coluna amigáveis
                const columnMappings = {
                    'eventos': {
                        'data': 'Data',
                        'tipo': 'Tipo',
                        'descricao': 'Descrição',
                        'veterinario_nome': 'Veterinário'
                    },
                    'pesagens': {
                        'data': 'Data',
                        'peso': 'Medição',
                        'variacao': 'Variação'
                    },
                    'avaliacoes': {
                        'data': 'Data',
                        'observacao': 'Observação',
                        'veterinario_nome': 'Veterinário',
                        'temperatura': 'Temp.',
                        'score': 'Score',
                        'peso': 'Peso',
                        'nota': 'Nota'
                    },
                    'imunizacoes': {
                        'data_exibicao': 'Data',
                        'tipo': 'Tipo',
                        'nome_imunizante': 'Imunizante',
                        'veterinario_nome': 'Veterinário',
                        'aplicada': 'Aplicada'
                    },
                    'tratamentos': {
                        'data': 'Data',
                        'veterinario_nome': 'Veterinário',
                        'medicamentos': 'Medicamentos',
                        'finalizada': 'Finalizado'
                    },
                    'arquivos': {
                        'data': 'Data',
                        'nome': 'Nome',
                        'observacao': 'Observação',
                        'url': 'Visualizar'
                    }
                };

                const excludedKeys = ['id', 'animal_id', 'veterinario_id', 'concluido', 'programado', 'atrasado'];

                // Função para renderizar a tabela
                const renderTable = (items, tabId) => {
                    const currentMapping = columnMappings[tabId] || {};
                    const headers = Object.keys(items[0]).filter(key => !excludedKeys.includes(key));

                    let tableHTML = '<table class="tab-table"><thead><tr>';

                    headers.forEach(header => {
                        const title = currentMapping[header] || header.charAt(0).toUpperCase() + header.slice(1);
                        tableHTML += '<th>' + title + '</th>';
                    });

                    tableHTML += '</tr></thead><tbody>';

                    items.forEach(item => {
                        let rowAttributes = '';
                        // MODIFICADO: Torna a linha clicável na aba de pesagens
                        if (tabId === 'pesagens') {
                            const safeJson = JSON.stringify(item).replace(/"/g, '&quot;');
                            rowAttributes = 'data-record="'+safeJson+'" onclick="handlePesagemClick(this)" style="cursor:pointer;"';
                        }
                        tableHTML += '<tr '+rowAttributes+'>';
                        headers.forEach(header => {
                            let formattedContent = '';
                            const cellContent = item[header];

                            if (['data', 'data_exibicao'].includes(header) && cellContent) {
                                const [year, month, day] = cellContent.split('-');
                                formattedContent = day + '/' + month + '/' + year;
                            } else if (header === 'peso' && cellContent !== null) {
                                formattedContent = cellContent + ' kg';
                            } else if (header === 'medicamentos' && Array.isArray(cellContent)) {
                                formattedContent = '<ul>' + cellContent.map(med => '<li>' + med + '</li>').join('') + '</ul>';
                            } else if (header === 'url' && cellContent) {
                                formattedContent = '<a href="' + cellContent + '" target="_blank">Visualizar</a>';
                            } else if (typeof cellContent === 'boolean') {
                                formattedContent = cellContent ? 'Sim' : 'Não';
                            } else {
                                formattedContent = cellContent || '';
                            }
                            tableHTML += '<td>' + formattedContent + '</td>';
                        });
                        tableHTML += '</tr>';
                    });

                    tableHTML += '</tbody></table>';
                    return tableHTML;
                };

                if (tabId == 'resumo') {
                    renderizarResumo(data.items);
                } else {
                    // botão fixo no topo direito (exceto resumo)
                    const ap = "'";
                    const newButtonHTML = '<div class="new-button-fixed"><button class="action-button" onclick="handleNewRecord('+ap+tabId+ap+')">Novo</button></div>';
                
                    tabContentElement.innerHTML = newButtonHTML + renderTable(data.items, tabId);
                }

                // Se for a guia de pesagens, renderiza o gráfico
                if (tabId === 'pesagens' && data.chartData) {
                    tabContentElement.innerHTML += '<div class="chart-container"><canvas id="weightChart"></canvas></div>';
                    renderChart(data.chartData);
                }

                cachedData[tabId] = true;
            }

        } catch (error) {
            tabContentElement.innerHTML = '<div class="error-message">Ocorreu um erro ao carregar os dados.</div>';
        }

    }

    function renderChart(chartData) {
        // Converte dados do backend em pontos {x,y}
        const dataPoints = chartData.map(item => ({
            x: new Date(item.data),
            y: item.peso
        }));

        const maxWeight = Math.max(...dataPoints.map(p => p.y));
        const maxYValue = Math.ceil(maxWeight / 10) * 10;

        const ctx = document.getElementById('weightChart').getContext('2d');

        // pega primeira e última data reais do dataset
        const dates = chartData.map(item => new Date(item.data));
        const minDate = new Date(Math.min(...dates));
        const today = new Date();

        // adiciona margem de 15 dias antes da primeira data
        const paddedMinDate = new Date(minDate);
        paddedMinDate.setDate(minDate.getDate() - 15);

        new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Peso',
                    data: dataPoints,
                    borderColor: '#4A90E2',
                    backgroundColor: 'rgba(74, 144, 226, 0.2)',
                    fill: true,
                    tension: 0.3,
                    pointRadius: 3
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'month',
                            displayFormats: {
                                month: 'MMM yy' // Exibe Jan 23, Fev 23, etc.
                            }
                        },
                        ticks: {
                            callback: function(value, index, ticks) {
                                const date = new Date(value);
                                // Verifica se é o primeiro mês do ano (Janeiro, que é o mês 0)
                                if (date.getMonth() === 0) {
                                    return date.getFullYear(); // Exibe o ano completo
                                } else {
                                    // Retorna a primeira letra do mês
                                    const month = date.toLocaleString('pt-BR', {
                                        month: 'short'
                                    });
                                    return month.charAt(0).toUpperCase();
                                }
                            },
                            autoSkip: true,
                            maxRotation: 0,
                            minRotation: 0
                        },
                        min: paddedMinDate,
                        max: today,
                        grid: {
                            drawTicks: true
                        }
                    },
                    y: {
                        beginAtZero: true,
                        suggestedMax: maxYValue
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    function handleNewRecord(tabId) {
        if (tabId === 'pesagens') {
            openPesagemPopup();
        } else {
            // Pode expandir para imunizações, tratamentos etc.
            showAlert('Abrindo formulário de novo registro em: ' + tabId, 'info', 2500);
        }
    }


    // Funções para inicializar o sistema de guias, pop-ups e outras funcionalidades
    function initTabs() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.getAttribute('data-tab');

                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));

                button.classList.add('active');
                document.getElementById('tab-' + tabId).classList.add('active');

                fetchTabData(tabId);
            });
        });
    }

    let currentButton = null;
    let currentType = null;

    function openMenu(data, button, type, labelKey) {
        currentButton = button;
        currentType = type;

        const menu = document.getElementById('pop-up-menu');
        const overlay = document.getElementById('overlay');
        const optionsContainer = document.getElementById('pop-up-options-container');

        menu.querySelector('h2').textContent = "Selecione " + type.charAt(0).toUpperCase() + type.slice(1);

        optionsContainer.innerHTML = '';
        data.forEach(item => {
            const option = document.createElement('div');
            option.classList.add('pop-up-option');
            option.textContent = item[labelKey];
            option.setAttribute('data-id', item.id);

            option.onclick = () => selectOption('${animal.animal_id}', item.id, item[labelKey]);
            optionsContainer.appendChild(option);
        });

        overlay.style.display = 'block';
        menu.style.display = 'flex';
    }

    function closeMenu() {
        document.getElementById('overlay').style.display = 'none';
        document.getElementById('pop-up-menu').style.display = 'none';
    }

    function selectOption(idAnimal, valueId, valueText) {
        if (currentButton && currentType) {
            updateCharacteristic(idAnimal, currentType, valueId, valueText);
        }
        closeMenu();
    }

    async function updateCharacteristic(animalId, type, valueId, valueText) {
        try {
            let payload = {
                animal_id: animalId,
                caracteristica: type,
                caracteristica_id: valueId,
                caracteristica_label: valueText
            };
            await fetch("https://karah-n8n.uzd6db.easypanel.host/webhook/kaniu_animal_update", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(payload)
            });

            currentButton.textContent = valueText;
            showAlert('Item salvo com sucesso.');
        } catch (error) {
            showAlert('Erro ao atualizar: ' + type + ' - ', error);
        }
    }

    function initDatePopup() {
        const nascimentoButton = document.getElementById("open-nascimento-menu");
        const nascimentoPopup = document.getElementById("pop-up-nascimento");
        const nascimentoInput = document.getElementById("nascimento-input");
        const confirmNascimento = document.getElementById("confirm-nascimento");
        const cancelNascimento = document.getElementById("cancel-nascimento");
        const overlay = document.getElementById("overlay");
        const popupActions = nascimentoPopup.querySelector('.pop-up-actions');

        nascimentoButton.onclick = function() {
            if (nascimentoButton.textContent !== "Definir Data") {
                nascimentoInput.value = nascimentoButton.textContent;
            } else {
                nascimentoInput.value = "";
            }
            // Limpa a mensagem de erro ao abrir
            clearErrorMessage(); 
            overlay.style.display = "block";
            nascimentoPopup.style.display = "flex";
        };
        
        function clearErrorMessage() {
            const errorElement = nascimentoPopup.querySelector('.error-message-nascimento');
            if (errorElement) {
                errorElement.remove();
            }
        }

        function showErrorMessage(message) {
            clearErrorMessage();
            popupActions.insertAdjacentHTML('beforebegin', '<p class="error-message-nascimento" style="color:var(--primary-color); font-size: 0.8rem; text-align:center; margin-bottom: 5px;">' + message + '</p>');
        }

        function closeNascimentoPopup() {
            clearErrorMessage();
            overlay.style.display = "none";
            nascimentoPopup.style.display = "none";
        }

        cancelNascimento.onclick = closeNascimentoPopup;

        confirmNascimento.onclick = async function() {
            const novaData = nascimentoInput.value;
            if (!novaData) {
                showErrorMessage('Selecione uma data válida.');
                return;
            }

            try {
                await fetch("https://karah-n8n.uzd6db.easypanel.host/webhook/kaniu_animal_update", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        animal_id: '${animal.animal_id}',
                        caracteristica: "nascimento",
                        data_nascimento: novaData
                    })
                });

                nascimentoButton.textContent = novaData;
                showAlert("Data de nascimento atualizada com sucesso!");
            } catch (error) {
                showAlert("Erro ao atualizar data de nascimento:", error);
            }

            closeNascimentoPopup();
        };

        document.addEventListener("keydown", function(event) {
            if (event.key === "Escape" || event.key === "Esc") {
                closeMenu();
                closeNascimentoPopup();
                closePesagemPopup(); // Fechar pop-up de Pesagem no ESC
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        initTabs();
        initDatePopup();

        document.getElementById('open-especie-menu').onclick = () =>
            openMenu(${especies}, document.getElementById('open-especie-menu'), 'especie', 'especie');

        document.getElementById('open-raca-menu').onclick = () =>
            openMenu(${racas}, document.getElementById('open-raca-menu'), 'raca', 'raca');

        document.getElementById('open-genero-menu').onclick = () =>
            openMenu(${generos}, document.getElementById('open-genero-menu'), 'genero', 'genero');

        document.getElementById('open-porte-menu').onclick = () =>
            openMenu(${portes}, document.getElementById('open-porte-menu'), 'porte', 'porte');

        document.getElementById('open-cor-menu').onclick = () =>
            openMenu(${cores}, document.getElementById('open-cor-menu'), 'cor', 'cor');

        document.getElementById('open-pelagem-menu').onclick = () =>
            openMenu(${pelagens}, document.getElementById('open-pelagem-menu'), 'pelagem', 'pelagem');
            
        // Configura os botões do pop-up de pesagem (MANTIDO CASO O POP-UP SEJA USADO PARA 'NOVO')
        document.getElementById('confirm-pesagem').onclick = updatePesagemRecord;
        document.getElementById('cancel-pesagem').onclick = closePesagemPopup;


        // Carrega a guia de resumo por padrão
        document.querySelector('[data-tab="resumo"]').click();
    });

    function renderizarResumo(resumoData) {

        if (!resumoData || resumoData.length === 0 ) {
            document.getElementById('tab-resumo').innerHTML =
                '<p class="no-data-message">Nenhum dado de resumo disponível.</p>';
            return;
        }

        const dados = resumoData[0];

        const secoes = {
            'saude-geral-list': [
                { label: 'Última avaliação', value: dados["Última avaliação"] || 'N/A' },
                { label: 'Score Corporal', value: dados['Score Corporal'] !== null ? dados["Score Corporal"] : 'N/A' },
                { label: 'Índice de saúde', value: dados['Índice de saúde'] || 'N/A' },
                { label: 'Observações', value: dados['Observações'] || 'N/A' }
            ],
            'vacinacao-list': [
                { label: 'Última vacinação', value: dados['Última vacinação'] || 'N/A' },
                { label: 'Próxima vacinação', value: dados['Próxima vacinação'] || 'N/A' }
            ],
            'parasitas-list': [
                { label: 'Última vermifugação', value: dados['Última vermifugação'] || 'N/A' },
                { label: 'Próxima vermifugação', value: dados['Próxima vermifugação'] || 'N/A' },
                { label: 'Última desparasitação', value: dados['Última desparasitação'] || 'N/A' },
                { label: 'Próxima desparasitação', value: dados['Próxima desparasitação'] || 'N/A' }
            ],
            'peso-list': [
                { label: 'Data da última pesagem', value: dados['Data pesagem'] || 'N/A' },
                { label: 'Peso atual', value: dados['Último peso'] !== null ? dados["Último peso"] + ' kg' : 'N/A' },
                { label: 'Peso anterior', value: dados['Peso anterior'] !== null ? dados["Peso anterior"] + ' kg' : "N/A" },
                { label: 'Variação de peso', value: dados['Variação de peso'] || 'N/A' }
            ]
        };

        for (const [id, itens] of Object.entries(secoes)) {
            const container = document.getElementById(id);

            if (container) {
                container.innerHTML = ''; // limpa antes
                itens.forEach(item => {
                    const itemHTML =
                        '<div class="resume-item"><strong>' + item.label + ':</strong> ' +
                        '<span class="resume-value">' + item.value + '</span></div>';
                    container.innerHTML += itemHTML;
                });
            }
        }
    }

    function showAlert(message, type = 'success', duration = 1500) {
        console.log('showAlert:' + message + ', ' + type + ', ' + duration);
        const popup = document.getElementById('alert-popup');
        const icon = document.getElementById('alert-icon');
        const messageText = document.getElementById('alert-message');

        // Limpa classes anteriores e adiciona a nova
        popup.className = 'alert-popup';
        popup.classList.add(type);
        popup.classList.add('show');
        
        // Define o texto da mensagem
        messageText.textContent = message;

        // Limpa e define o conteúdo do ícone
        //icon.innerHTML = '';
        //icon.classList.add(type);

        // Define um temporizador para esconder o pop-up
        setTimeout(() => {
            popup.classList.remove('show');
        }, duration);
    }
</script>

<script>
      // Função para simular o início da criação de um novo registro
    function newRecord(tabId) {
        showAlert('Iniciando a criação de um novo registro em: ' + tabId, 'info', 2500);
        // Coloque aqui a lógica para abrir um pop-up/formulário 
        // para a criação do novo item para a guia (tabId)
    }
</script>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Adote ${animal.nome}</title>
</head>

<body>
    <header class="header">
        <div class="header-content">
            <img class="header-logo" src="${img_logo}" alt="Logo Kaniu"/>
        </div>
    </header>
    <div class="main-content">
        <div class="animal-details-frame">
            <a href="${app_url}" class="back-button">Voltar</a>
            <div class="content-wrapper">
                <div class="animal-photo-container">
                    <img class="animal-photo" src="${animal.foto}" alt="Foto de ${animal.nome}" />
                </div>
                <div class="text-content">
                    <div class="animal-header">
                        <h1>${animal.nome}</h1>
                    </div>
                    <div class="button-container">
                        ${iconesAnimal}
                    </div>
                </div>
            </div>
            <div class="details-container">
                <div class="details-grid">
                    <div class="detail-item">
                        <strong>Espécie:</strong>
                        <button class="detail-button" id="open-especie-menu">${animal.especie}</button>
                    </div>
                    <div class="detail-item">
                        <strong>Raça:</strong>
                        <button class="detail-button" id="open-raca-menu">${animal.raça}</button>
                    </div>
                    <div class="detail-item">
                        <strong>Gênero:</strong>
                        <button class="detail-button" id="open-genero-menu">${animal.sexo}</button>
                    </div>
                    <div class="detail-item">
                        <strong>Porte:</strong>
                        <button class="detail-button" id="open-porte-menu">${animal.porte}</button>
                    </div>
                    <div class="detail-item">
                        <strong>Cor:</strong>
                        <button class="detail-button" id="open-cor-menu">${animal.cor}</button>
                    </div>
                    <div class="detail-item">
                        <strong>Pelagem:</strong>
                        <button class="detail-button" id="open-pelagem-menu">${animal.pelagem}</button>
                    </div>
                    <div class="detail-item">
                        <strong>Data de Nascimento:</strong>
                        <button id="open-nascimento-menu" class="detail-button">${animal.nascimento ? animal.nascimento : 'Definir Data'}</button>
                    </div>
                    <div class="detail-item"><strong>Faixa Etária:</strong> <span class="characteristic-box">${animal.faixa_etaria}</span></div>
                    <div class="detail-item"><strong>Idade:</strong> <span class="characteristic-box">${ageString}</span></div>
                    <div class="detail-item"><strong>Peso:</strong> <span class="characteristic-box">${formatValue(animal.peso)} kg</span></div>
                    <div class="detail-item"><strong>Altura:</strong> <span class="characteristic-box">${formatValue(animal.altura)} cm</span></div>
                    <div class="detail-item"><strong>Comprimento:</strong> <span class="characteristic-box">${formatValue(animal.comprimento)} cm</span></div>
                </div>
            </div>
        </div>

        <div class="tab-container">
            <div class="tab-nav">
                <button class="tab-btn active" data-tab="resumo">Resumo</button>
                <button class="tab-btn" data-tab="eventos">Histórico</button>
                <button class="tab-btn" data-tab="avaliacoes">Avaliação</button>
                <button class="tab-btn" data-tab="pesagens">Pesagem</button>
                <button class="tab-btn" data-tab="imunizacoes">Imunização</button>
                <button class="tab-btn" data-tab="tratamentos">Tratamento</button>
                <button class="tab-btn" data-tab="arquivos">Arquivos</button>
            </div>

            <div class="tab-content-area">
                <div id="tab-resumo" class="tab-content">
                    <div class="resume-sections">
                        <div class="resume-section">
                            <h3 class="resume-title">Saúde Geral</h3>
                            <div id="saude-geral-list" class="resume-list">
                            </div>
                        </div>

                        <div class="resume-section">
                            <h3 class="resume-title">Vacinação</h3>
                            <div id="vacinacao-list" class="resume-list">
                            </div>
                        </div>

                        <div class="resume-section">
                            <h3 class="resume-title">Controle de Parasitas</h3>
                            <div id="parasitas-list" class="resume-list">
                            </div>
                        </div>

                        <div class="resume-section">
                            <h3 class="resume-title">Avaliação e Peso</h3>
                            <div id="peso-list" class="resume-list">
                            </div>
                        </div>
                    </div>
                </div>
                <div id="tab-eventos" class="tab-content"></div>
                <div id="tab-avaliacoes" class="tab-content"></div>
                <div id="tab-pesagens" class="tab-content"></div>
                <div id="tab-imunizacoes" class="tab-content"></div>
                <div id="tab-tratamentos" class="tab-content"></div>
                <div id="tab-arquivos" class="tab-content"></div>
            </div>
        </div>
    </div>

    <div id="overlay" class="overlay"></div>
    <div id="pop-up-menu" class="pop-up-menu">
        <span class="pop-up-close" onclick="closeMenu()">&times;</span>
        <h2>Selecione a Espécie</h2>
        <div id="pop-up-options-container" class="pop-up-options-container">
        </div>
    </div>

    <div id="pop-up-nascimento" class="pop-up-menu" style="width: 280px; padding: 15px;">
        <span class="pop-up-close" onclick="document.getElementById('pop-up-nascimento').style.display='none'; document.getElementById('overlay').style.display='none';">&times;</span>
        <h2 id="nascimento-popup-title">Alterar Data de Nascimento</h2>
        <div class="pop-up-options-container" style="align-items: center; width: 100%; box-sizing: border-box;">
            <input type="date" id="nascimento-input" class="date-input" style="width: 100%;" />
        </div>
        <div class="pop-up-actions" style="margin-top: 5px;">
            <button id="confirm-nascimento" class="detail-button" style="background-color: var(--primary-color); color: var(--card-background); flex: 1; max-width: 100px;">Salvar</button>
            <button id="cancel-nascimento" class="detail-button" style="flex: 1; max-width: 100px;">Cancelar</button>
        </div>
    </div>
    
    <div id="alert-popup" class="alert-popup">
        <span id="alert-message"></span>
    </div>

    <div id="pop-up-pesagem" class="pop-up-menu" style="width: 280px; padding: 40px;">
        <span class="pop-up-close" onclick="closePesagemPopup()">&times;</span>
        <h2>Pesagem</h2>
        <div class="pop-up-content" style="display: flex; flex-direction: column; gap: 5px;">
            <input type="hidden" id="pesagem-id" />
            
            <label style="font-size: 0.8rem; color: var(--text-dark);">Data da Medição</label>
            <input type="date" id="pesagem-data-input" class="date-input" />
            
            <label style="font-size: 0.8rem; color: var(--text-dark);">Peso (kg)</label>
            <input type="number" step="0.1" id="pesagem-peso-input" class="date-input" placeholder="Ex: 5.2" />
        </div>
        <div class="pop-up-actions" style="margin-top: 5px;">
            <button id="cancel-pesagem" class="cancel-button" style="flex: 1; max-width: 100px;">Cancelar</button>
            <button id="confirm-pesagem" class="action-button" flex: 1; max-width: 100px;">Salvar</button>
        </div>
    </div>
    <script>
        (function () {
          function setToolbarOffsets() {
            document.querySelectorAll('.tab-content').forEach(tab => {
              const toolbar = tab.querySelector('.new-button-fixed');
              const toolbarH = toolbar ? toolbar.getBoundingClientRect().height : 0;
              const padTop = parseFloat(getComputedStyle(tab).paddingTop) || 0;
              const offset = toolbarH + padTop;
              tab.style.setProperty('--tab-header-offset', offset + 'px');
            });
          }
        
          // inicial + resize
          window.addEventListener('load', setToolbarOffsets);
          window.addEventListener('resize', setToolbarOffsets);
        
          // se a barra “Novo” mudar de altura (quebrar linha, fonte, etc.)
          const ro = new ResizeObserver(setToolbarOffsets);
          document.querySelectorAll('.new-button-fixed').forEach(el => ro.observe(el));
        })();
    </script>

    <script>
        (function () {
          function setToolbarOffsets() {
            document.querySelectorAll('.tab-content').forEach(tab => {
              const toolbar = tab.querySelector('.new-button-fixed');
              const toolbarH = toolbar ? toolbar.getBoundingClientRect().height : 0;
              const padTop = parseFloat(getComputedStyle(tab).paddingTop) || 0;
              const offset = toolbarH + padTop;
              tab.style.setProperty('--tab-header-offset', offset + 'px');
            });
          }
        
          window.addEventListener('load', setToolbarOffsets);
          window.addEventListener('resize', setToolbarOffsets);
        
          const ro = new ResizeObserver(setToolbarOffsets);
          document.querySelectorAll('.new-button-fixed').forEach(el => ro.observe(el));
        })();
    </script>

</body>

</html>
`;

return [{ json: { html: html } }];